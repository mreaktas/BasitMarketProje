# -*- coding: utf-8 -*-
"""MarketProje.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bH2DXLRuERg_AP2aAsIokmPzXXOD2bDa

# Çevrimiçi Market Alışveriş Sepeti Projesi
"""

class Market:
    def __init__(self):
        """Market sınıfının yapıcı metodu"""
        self.admin_username = "admin"
        self.admin_password = "admin"
        self.is_admin_logged_in = False
        try:
            # Dosyayı açmayı dene, yoksa oluştur
            with open("product.txt", "a") as f:
                pass
        except Exception as e:
            print(f"Dosya oluşturulurken hata oluştu: {e}")

    def __del__(self):
        """Yıkıcı metot - program sonlandığında çağrılır"""
        try:
            with open("product.txt", "r") as f:
                f.close()
        except Exception as e:
            print(f"Dosya kapatılırken hata oluştu: {e}")

    def admin_login(self):
        """Admin girişi için kimlik doğrulama metodu"""
        print("\n=== YÖNETİCİ GİRİŞİ ===")
        username = input("Kullanıcı adı: ")
        password = input("Şifre: ")

        if username == self.admin_username and password == self.admin_password:
            self.is_admin_logged_in = True
            print("\nYönetici girişi başarılı!")
            return True
        else:
            print("\nHatalı kullanıcı adı veya şifre!")
            return False

    def admin_logout(self):
        """Admin çıkışı metodu"""
        self.is_admin_logged_in = False
        print("\nYönetici oturumu sonlandırıldı.")

    def admin_panel(self):
        """Admin paneli menüsü"""
        if not self.is_admin_logged_in:
            if not self.admin_login():
                return

        while True:
            print("\n=== YÖNETİCİ MARKET PANELİ ===")
            print("1) Ürünleri Listele")
            print("2) Ürün Ekle")
            print("3) Fiyat/Stok Güncelle")
            print("4) Ürün Sil")
            print("5) Yönetici Panelinden Çıkış")

            choice = input("\nYapmak İstediğiniz İşlemi Seçiniz (1-5): ")

            if choice == "1":
                self.list_products()
            elif choice == "2":
                self.add_product()
            elif choice == "3":
                self.update_product()
            elif choice == "4":
                self.delete_product()
            elif choice == "5":
                self.admin_logout()
                print("\nYönetici paneli kapatılıyor...")
                break
            else:
                print("\nGeçersiz işlem seçimi! Lütfen 1-5 arası bir işlem değeri giriniz.")

    def list_products(self):
        """Ürünleri listeleyen metot"""
        try:
            with open("product.txt", "r", encoding="utf-8") as f:
                lines = f.readlines()

            if not lines:
                print("\nHenüz hiç bir ürün eklenmemiş! Sepette ürün bulunmamaktadır.")
                return

            print("\n=== ÜRÜN LİSTESİ ===")
            print("ID  |  Ürün Adı  |  Kategori  |  Fiyat  |  Stok")
            print("-" * 50)

            for idx, line in enumerate(lines, 1):
                product_info = line.strip().split(",")
                if len(product_info) == 4:  # Doğru format kontrolü
                    name, category, price, stock = product_info
                    print(f"{idx:<4}| {name:<11}| {category:<10}| {price:>7} TL| {stock:>5}")

        except Exception as e:
            print(f"Ürünler listelenirken hata oluştu: {e}")

    def add_product(self):
        """Yeni ürün ekleme metodu"""
        if not self.is_admin_logged_in:
            print("\nBu işlem için admin yetkisi gereklidir!")
            return

        try:
            name = input("Ürün adı: ")
            category = input("Kategori: ")
            price = input("Fiyat (TL): ")
            stock = input("Stok miktarı: ")

            # Basit veri doğrulama
            if not name or not category or not price or not stock:
                print("Tüm alanlar doldurulmalıdır!")
                return

            try:
                float(price)
                int(stock)
            except ValueError:
                print("Fiyat ve stok sadece sayısal değerler olmalıdır!")
                return

            # Ürünü dosyaya ekle
            with open("product.txt", "a", encoding="utf-8") as f:
                f.write(f"{name},{category},{price},{stock}\n")

            print(f"\n{name} ürünü başarıyla eklendi!")

        except Exception as e:
            print(f"Ürün eklenirken hata oluştu: {e}")

    def delete_product(self):
        """Ürün silme metodu"""
        if not self.is_admin_logged_in:
            print("\nBu işlem için admin yetkisi gereklidir!")
            return

        try:
            self.list_products()  # Önce mevcut ürünleri göster

            with open("product.txt", "r", encoding="utf-8") as f:
                lines = f.readlines()

            if not lines:
                print("Silinecek ürün bulunmamaktadır!")
                return

            product_id = input("\nSilmek istediğiniz ürünün ID'sini girin: ")

            try:
                product_id = int(product_id)
                if product_id < 1 or product_id > len(lines):
                    print("Geçersiz ürün ID'si!")
                    return
            except ValueError:
                print("ID sayısal bir değer olmalıdır!")
                return

            deleted_product = lines.pop(product_id - 1)
            deleted_name = deleted_product.split(",")[0]

            # Güncellenmiş listeyi dosyaya yaz
            with open("product.txt", "w", encoding="utf-8") as f:
                f.writelines(lines)

            print(f"\n{deleted_name} ürünü başarıyla silindi!")

        except Exception as e:
            print(f"Ürün silinirken hata oluştu: {e}")

    def update_product(self):
        """Ürün fiyat ve stok güncelleme metodu"""
        if not self.is_admin_logged_in:
            print("\nBu işlem için admin yetkisi gereklidir!")
            return

        try:
            self.list_products()  # Önce mevcut ürünleri göster

            with open("product.txt", "r", encoding="utf-8") as f:
                lines = f.readlines()

            if not lines:
                print("Güncellenecek ürün bulunmamaktadır!")
                return

            product_id = input("\nGüncellenecek ürünün ID'sini girin: ")

            try:
                product_id = int(product_id)
                if product_id < 1 or product_id > len(lines):
                    print("Geçersiz ürün ID'si!")
                    return
            except ValueError:
                print("ID sayısal bir değer olmalıdır!")
                return

            # Seçilen ürünün bilgilerini al
            product_info = lines[product_id - 1].strip().split(",")
            name, category, current_price, current_stock = product_info

            print(f"\nÜrün: {name}")
            print(f"Mevcut fiyat: {current_price} TL")
            print(f"Mevcut stok: {current_stock}")

            print("\nGüncellemek istediğiniz bilgiyi seçin:")
            print("1) Sadece fiyat güncelle")
            print("2) Sadece stok güncelle")
            print("3) Hem fiyat hem stok güncelle")
            update_choice = input("Seçiminiz (1-3): ")

            new_price = current_price
            new_stock = current_stock

            if update_choice in ['1', '3']:
                new_price = input("Yeni fiyat (TL): ")
                try:
                    new_price = float(new_price)
                    if new_price < 0:
                        print("Fiyat negatif olamaz!")
                        return
                except ValueError:
                    print("Fiyat sayısal bir değer olmalıdır!")
                    return

            if update_choice in ['2', '3']:
                new_stock = input("Yeni stok miktarı: ")
                try:
                    new_stock = int(new_stock)
                    if new_stock < 0:
                        print("Stok miktarı negatif olamaz!")
                        return
                except ValueError:
                    print("Stok miktarı sayısal bir değer olmalıdır!")
                    return

            # Ürün bilgilerini güncelle
            lines[product_id - 1] = f"{name},{category},{new_price},{new_stock}\n"

            # Güncellenmiş listeyi dosyaya yaz
            with open("product.txt", "w", encoding="utf-8") as f:
                f.writelines(lines)

            print(f"\n{name} ürünü başarıyla güncellendi!")
            print(f"Yeni fiyat: {new_price} TL")
            print(f"Yeni stok: {new_stock}")

        except Exception as e:
            print(f"Ürün güncellenirken hata oluştu: {e}")

def main():
    """Ana program döngüsü"""
    market = Market()

    while True:
        print("\n*** MARKET MENÜSÜ ***")
        print("1) Yönetici Paneli")
        print("2) Ürünleri Listele")
        print("3) Ürün Ekle")
        print("4) Ürün Sil")
        print("5) Çıkış")

        choice = input("\nYapmak İstediğiniz İşlemi Seçiniz (1-5): ")

        if choice == "1":
            market.admin_panel()
        elif choice == "2":
            market.list_products()
        elif choice == "3":
            market.add_product()
        elif choice == "4":
            market.delete_product()
        elif choice == "5":
            print("\nMarket sistemi kapatılıyor...")
            break
        else:
            print("\nGeçersiz işlem seçimi! Lütfen 1-5 arası bir işlem değeri giriniz.")

if __name__ == "__main__":
    main()